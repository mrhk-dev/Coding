What is Docker?
	Docker is an open-source platform that enables developers to build, share, and run applications in lightweight, portable environments known as containers.
	It has become a fundamental tool in modern software development, particularly for microservices architecture and DevOps practices.

Key features of Docker:
	Containerization: Docker packages applications and their dependencies into containers, which are isolated from the host system.
		This allows applications to run consistently across various environments, such as development, testing, and production, without compatibility issues.
	Efficiency: Containers share the host operating system's kernel, making them more lightweight compared to traditional virtual machines (VMs). 
		This results in faster startup times and better resource utilization, allowing multiple containers to run on a single server
	Portability: Docker containers can run on any system that has the Docker Engine installed, whether it's on-premises servers or cloud environments. 
		This portability simplifies deployment and scaling of applications.
	Development Workflow: Docker enhances the development lifecycle by enabling continuous integration and continuous delivery (CI/CD) practices. 
		Developers can create a containerized application locally, test it, and then deploy it to production with minimal changes.

Components of Docker:
	Docker Engine: The core component that runs and manages containers. It consists of:
		Docker Daemon (dockerd): Manages container operations and handles requests from the Docker client.
		Docker Client (docker): The command-line interface used to interact with the Docker daemon45.
	Docker Images: Read-only templates used to create containers. 
		They contain everything needed to run an application, including code, libraries, and dependencies35.
	Docker Containers: The running instances of Docker images. 
		Containers are ephemeral; they can be created, modified, and destroyed easily25.
	Docker Registry: A repository for storing Docker images, such as Docker Hub or private registries

What is a container in Docker?
	Docker containers are standardized, encapsulated environments that allow applications to run in isolation from one another and the host system.
	They are created from Docker images, which serve as the blueprint containing the application code and all necessary dependencies, libraries, and settings required for execution.	

How Docker works:
	we provide the commands from docker cli(docker clinet)
	the command is then sent to the docker demon
	the docker demon checks if the image is available in docker repo
	if avilable then it runs else it downloads from the docker Registry.
	after downloading it runs in container

============================================================================
Docker commands:

check if the docker is installed:
command: docker info 

to run the first image in docker
command: docker run hello-world

check the status of the container
command: docker container ls


What are downloaded when we install docker?
docker ce
docker ce cli
containerd
docker compose
docker buildx

A container process gets few things
* Users
* CPU and ram
* mount
* process tree

these are provided by 
* NameSpace
	* user -for creating the users in containers
	*net - for having the network 
	*pid - Process ID
* cGroups
	*cpu
	*ram
* Union File System

Containerazation:
Making applications work in container is refered as conteinerization.


Creating the Docker image:
There are two ways to create the docker image:
	* Manual Steps
	* Docker file

Manual steps:
	These refer to installing the softwares and running the application or website maually
	ex: to run a website we need the nginx.
	
1) Docker steps:
	For running a website we will first install the nginx and then the website into nginx folder
	install Docker image that has nginx.
		ex: docker pull ngins:1.27
		We can then run the docker container from this image
		"docker container run -d -P --name nginx-manual nginx:1.27"
		
Docker file:


After writing the file
	* execute the command to create the continer from image
		: docker image build -t auto:1.0 .
		. refers to the current folder location.



