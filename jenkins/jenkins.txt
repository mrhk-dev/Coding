Installing jenkins:

After installing jenkis, it automatically creates the user called jenkins with bash terminal

What is jenkins?
Jenkins is an open-source automation server that automates tasks related to building, testing, and deploying softwares.

PreRequisites of Jenkins?
needs to have the "open jdk 17"

Installation guide:
Refer here: https://www.jenkins.io/doc/book/installing/

check the status of jenkins with "sudo systemctl status jenkins"

Accessing jenkins:
on the browser use url http://localhost:8080
for the first time this will prompt for the admin password

User in Jenkins:
after the admin password is set, jenkins will ask for the user creation.
we will further be accessing the jenkins with this user, so store it at some place.

Jenkins vs Azure DevOps:
Comparison of Jenkins and Azure DevOps
Both Jenkins and Azure DevOps are popular tools for Continuous Integration and Continuous Delivery (CI/CD), but they cater to different needs and preferences. Here's a detailed comparison based on various aspects:
    1. User Interface and Usability
        Azure DevOps offers a cleaner and more modern interface, making it user-friendly for both beginners and experienced users. This ease of navigation is often highlighted as a significant advantage over Jenkins, which has a more complex and cluttered interface14.
        Jenkins, while powerful, has a steeper learning curve due to its extensive configuration options and reliance on plugins. Users often need more technical expertise to navigate its setup and maintenance24.
    2. Integration Capabilities
        Azure DevOps provides seamless integration with Microsoft tools such as Azure cloud services, Visual Studio, and Active Directory, making it an excellent choice for organizations heavily invested in the Microsoft ecosystem35.
        Jenkins, being open-source, supports a wide range of third-party integrations through its vast library of plugins, allowing for greater flexibility in diverse development environments35.
    3. Pipeline Configuration
        Azure DevOps utilizes a YAML interface for pipeline configuration, enabling users to define CI/CD pipelines as code, which enhances version control and collaboration25.
        In contrast, Jenkins does not have a native YAML interface; its pipelines are typically scripted in Groovy, which can be cumbersome for some users24.
    4. Deployment Options
        Azure DevOps is primarily cloud-based, allowing easy management of pipelines and repositories directly within the Azure platform. It also supports deployment to various environments seamlessly34.
        Jenkins, however, offers more flexibility in deployment options as it can be installed on-premises or in any cloud environment, providing organizations with complete control over their infrastructure35.
    5. Features and Functionality
        Azure DevOps comes with a comprehensive set of integrated features out-of-the-box, including version control, CI/CD tools, and testing frameworks without requiring extensive configuration34.
        Jenkins is highly customizable through plugins but requires more initial setup time to configure these features according to specific project needs23.
    6. Scalability
        Both tools are scalable; however, Azure DevOps is designed to scale seamlessly in the cloud environment with features like parallel execution and agent pools34. Jenkins can also handle large-scale projects but may require more manual configuration to optimize performance24.
    7. Cost
        Azure DevOps offers various pricing models, including a free tier for small teams and pay-as-you-go plans for larger organizations. This transparency helps organizations manage costs effectively36.
        Conversely, Jenkins is free as an open-source tool; however, organizations must consider costs associated with infrastructure setup and maintenance35.

Conclusion
    Choosing between Jenkins and Azure DevOps largely depends on your organization's specific needs:
    If you prioritize ease of use, tight integration with Microsoft products, and a modern interface, Azure DevOps may be the better choice.
    If you need maximum flexibility, extensive customization options, and control over your deployment environment, then Jenkins might be more suitable.
    Many organizations find value in using both tools together, leveraging Azure Pipelines' capabilities while utilizing Jenkins for complex workflows where flexibility is paramount

Jenkins Dashboard:
* New Items
* Build History
* Manage Jenkins

Creating pipline:
Types of Creating pipeline:
	* FreeStyle Project
	

### FreeStyle Project
	This is a way for creating the pipeline with GUI
	
Configrations in pipeline:
	* General
	* Source Code management
    * Build Triggers
    * Build Environment
    * Build Steps
    * Post-build Actions

General: 


Pipeline Management:
After the pipeline is created we can build the pipeline with build now opetion.



